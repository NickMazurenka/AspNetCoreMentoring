/* 
 * NorthwindTraders API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void Delete (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductGetDto&gt;</returns>
        List<ProductGetDto> Get ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductGetDto&gt;</returns>
        ApiResponse<List<ProductGetDto>> GetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProductGetDto</returns>
        ProductGetDto Get_0 (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProductGetDto</returns>
        ApiResponse<ProductGetDto> Get_0WithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ProductGetDto</returns>
        ProductGetDto Post (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ApiResponse of ProductGetDto</returns>
        ApiResponse<ProductGetDto> PostWithHttpInfo (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ProductGetDto</returns>
        ProductGetDto Put (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ApiResponse of ProductGetDto</returns>
        ApiResponse<ProductGetDto> PutWithHttpInfo (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductGetDto&gt;</returns>
        System.Threading.Tasks.Task<List<ProductGetDto>> GetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductGetDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductGetDto>>> GetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProductGetDto</returns>
        System.Threading.Tasks.Task<ProductGetDto> Get_0Async (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProductGetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductGetDto>> Get_0AsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ProductGetDto</returns>
        System.Threading.Tasks.Task<ProductGetDto> PostAsync (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductGetDto>> PostAsyncWithHttpInfo (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ProductGetDto</returns>
        System.Threading.Tasks.Task<ProductGetDto> PutAsync (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductGetDto>> PutAsyncWithHttpInfo (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete (int? id)
        {
             DeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Delete");

            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (int? id)
        {
             await DeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Delete");

            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductGetDto&gt;</returns>
        public List<ProductGetDto> Get ()
        {
             ApiResponse<List<ProductGetDto>> localVarResponse = GetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductGetDto&gt;</returns>
        public ApiResponse< List<ProductGetDto> > GetWithHttpInfo ()
        {

            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductGetDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductGetDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductGetDto>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductGetDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductGetDto>> GetAsync ()
        {
             ApiResponse<List<ProductGetDto>> localVarResponse = await GetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductGetDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductGetDto>>> GetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductGetDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductGetDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductGetDto>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProductGetDto</returns>
        public ProductGetDto Get_0 (int? id)
        {
             ApiResponse<ProductGetDto> localVarResponse = Get_0WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProductGetDto</returns>
        public ApiResponse< ProductGetDto > Get_0WithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Get_0");

            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGetDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGetDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProductGetDto</returns>
        public async System.Threading.Tasks.Task<ProductGetDto> Get_0Async (int? id)
        {
             ApiResponse<ProductGetDto> localVarResponse = await Get_0AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProductGetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductGetDto>> Get_0AsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Get_0");

            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGetDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGetDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ProductGetDto</returns>
        public ProductGetDto Post (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {
             ApiResponse<ProductGetDto> localVarResponse = PostWithHttpInfo(productName, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ApiResponse of ProductGetDto</returns>
        public ApiResponse< ProductGetDto > PostWithHttpInfo (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {

            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProductName", productName)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CategoryId", categoryId)); // query parameter
            if (quantityPerUnit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QuantityPerUnit", quantityPerUnit)); // query parameter
            if (unitPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitPrice", unitPrice)); // query parameter
            if (unitsInStock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsInStock", unitsInStock)); // query parameter
            if (unitsOnOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsOnOrder", unitsOnOrder)); // query parameter
            if (reorderLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReorderLevel", reorderLevel)); // query parameter
            if (discontinued != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Discontinued", discontinued)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGetDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGetDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ProductGetDto</returns>
        public async System.Threading.Tasks.Task<ProductGetDto> PostAsync (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {
             ApiResponse<ProductGetDto> localVarResponse = await PostAsyncWithHttpInfo(productName, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductGetDto>> PostAsyncWithHttpInfo (string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {

            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProductName", productName)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CategoryId", categoryId)); // query parameter
            if (quantityPerUnit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QuantityPerUnit", quantityPerUnit)); // query parameter
            if (unitPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitPrice", unitPrice)); // query parameter
            if (unitsInStock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsInStock", unitsInStock)); // query parameter
            if (unitsOnOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsOnOrder", unitsOnOrder)); // query parameter
            if (reorderLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReorderLevel", reorderLevel)); // query parameter
            if (discontinued != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Discontinued", discontinued)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGetDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGetDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ProductGetDto</returns>
        public ProductGetDto Put (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {
             ApiResponse<ProductGetDto> localVarResponse = PutWithHttpInfo(id, productName, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>ApiResponse of ProductGetDto</returns>
        public ApiResponse< ProductGetDto > PutWithHttpInfo (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Put");

            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProductName", productName)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CategoryId", categoryId)); // query parameter
            if (quantityPerUnit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QuantityPerUnit", quantityPerUnit)); // query parameter
            if (unitPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitPrice", unitPrice)); // query parameter
            if (unitsInStock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsInStock", unitsInStock)); // query parameter
            if (unitsOnOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsOnOrder", unitsOnOrder)); // query parameter
            if (reorderLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReorderLevel", reorderLevel)); // query parameter
            if (discontinued != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Discontinued", discontinued)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Put", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGetDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGetDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ProductGetDto</returns>
        public async System.Threading.Tasks.Task<ProductGetDto> PutAsync (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {
             ApiResponse<ProductGetDto> localVarResponse = await PutAsyncWithHttpInfo(id, productName, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductGetDto>> PutAsyncWithHttpInfo (int? id, string productName = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Put");

            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProductName", productName)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CategoryId", categoryId)); // query parameter
            if (quantityPerUnit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QuantityPerUnit", quantityPerUnit)); // query parameter
            if (unitPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitPrice", unitPrice)); // query parameter
            if (unitsInStock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsInStock", unitsInStock)); // query parameter
            if (unitsOnOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UnitsOnOrder", unitsOnOrder)); // query parameter
            if (reorderLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReorderLevel", reorderLevel)); // query parameter
            if (discontinued != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Discontinued", discontinued)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Put", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGetDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGetDto)));
        }

    }
}
